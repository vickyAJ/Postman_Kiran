{
	"info": {
		"_postman_id": "ab80527d-3239-42a1-9b04-a03f373c82ff",
		"name": "PROJECT2",
		"description": "This is a RESTful project which has 4 APIs developed. The below APIs uses _**GET, POST, PATCH & DELETE**_ HTTP methods:\n\n1. LIST USERS API\n    \n2. CREATE USER API\n    \n3. UPDATE USER API\n    \n4. DELETE USER API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "E2E API AUTOMATION",
			"item": [
				{
					"name": "CREATE A USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31631287-1279-4d2f-a1af-e7a21848b436",
								"exec": [
									"pm.test(\"Verify if response code=201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is in JSON format\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if server response header is not present\", function () {\r",
									"    pm.response.to.not.have.header(\"server\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body has the fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"// API CHAINING AUTOMATION\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// let us extract id value\r",
									"var extractedID = jsonData.id;\r",
									"pm.globals.set(\"globalID\", extractedID);\r",
									"\r",
									"// let us extract name value\r",
									"var extractedName = jsonData.name;\r",
									"pm.globals.set(\"globalName\", extractedName);\r",
									"\r",
									"// let us extract email value\r",
									"var extractedEmail = jsonData.email;\r",
									"pm.globals.set(\"globalEmail\", extractedEmail);\r",
									"\r",
									"// let us extract status value\r",
									"var extractedStatus = jsonData.status;\r",
									"pm.globals.set(\"globalStatus\", extractedStatus);\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL STATEMENTS\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF THE USER IS CREATED\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");    // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ca3cdc54-0493-4969-aaef-50577d3729ef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomLastName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://gorest.co.in/public/v2/users"
					},
					"response": []
				},
				{
					"name": "VERIFY IF THE USER IS CREATED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68d7cf06-32e5-4c9f-be6f-1ca4da06761e",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a574e545-2c11-4475-912e-bab502689ac7",
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body has fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"server\");\r",
									"});\r",
									"\r",
									"// JSON-VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if the user is created with id: \"+pm.globals.get(\"globalID\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// VALIDATE DATA-TYPES\r",
									"\r",
									"pm.test(\"Verify the data-types of all fields in the response body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof(jsonData[2].id)).to.eql(\"number\");\r",
									"    pm.expect(typeof(jsonData[2].email)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].name)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].status)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].gender)).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL STATEMENTS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has PASSED\");\r",
									"    pm.execution.setNextRequest(\"UPDATE THE CREATED USER\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");    // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "930f1f00-14bf-4f71-986f-33eb484db995",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							}
						],
						"url": "https://gorest.co.in/public/v2/users/"
					},
					"response": []
				},
				{
					"name": "UPDATE THE CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "470c7f0b-8ad3-4936-993c-b4f9fc0aa7ba",
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body has fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"server\");\r",
									"});\r",
									"\r",
									"// JSON-VALUE CHECK\r",
									"\r",
									"pm.test.skip(\"Verify if name=Mr.Vicky & gender=male\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"Mr.Vicky\");\r",
									"    pm.expect(jsonData.gender).to.eql(\"male\");\r",
									"});\r",
									"\r",
									"// ENUM-VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if gender is either male or female\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if status is either active or inactive\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"// PRINT DATA-TYPES\r",
									"\r",
									"console.log(\"The data-type of email field is \"+typeof(pm.response.json().email));\r",
									"console.log(\"The data-type of name field is \"+typeof(pm.response.json().name));\r",
									"console.log(\"The data-type of status field is \"+typeof(pm.response.json().status));\r",
									"console.log(\"The data-type of id field is \"+typeof(pm.response.json().id));\r",
									"console.log(\"The data-type of gender field is \"+typeof(pm.response.json().gender));\r",
									"\r",
									"// VALIDATE DATA-TYPES\r",
									"\r",
									"pm.test(\"Verify the data-types of all fields in the response body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof(jsonData.id)).to.eql(\"number\");\r",
									"    pm.expect(typeof(jsonData.email)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData.name)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData.status)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData.gender)).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"// API CHAINING AUTOMATION\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"// let us extract name value\r",
									"var extractedName = jsonData.name;\r",
									"pm.globals.set(\"globalUpdatedName\", extractedName);\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL STATEMENTS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF THE USER IS UPDATED\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");    // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "40da35dc-29ce-4633-971b-f671b2a0f625",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}} {{globalName}}\",\r\n    \"email\": \"{{globalEmail}}\",\r\n    \"status\": \"{{globalStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://gorest.co.in/public/v2/users/{{globalID}}"
					},
					"response": []
				},
				{
					"name": "VERIFY IF THE USER IS UPDATED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4ffc3668-d8b3-49ba-9400-26d7659ce869",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "42647303-8fcb-4e49-a8aa-c3fa4d5e13e5",
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body has fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"server\");\r",
									"});\r",
									"\r",
									"// JSON-VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if the user is updated as: \"+pm.globals.get(\"globalUpdatedName\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(pm.globals.get(\"globalUpdatedName\"));\r",
									"});\r",
									"\r",
									"// VALIDATE DATA-TYPES\r",
									"\r",
									"pm.test(\"Verify the data-types of all fields in the response body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof(jsonData[2].id)).to.eql(\"number\");\r",
									"    pm.expect(typeof(jsonData[2].email)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].name)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].status)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].gender)).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL STATEMENTS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has PASSED\");\r",
									"    pm.execution.setNextRequest(\"DELETE THE CREATED USER\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");    // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6f1ef8e3-88e1-48d7-8e0c-5aa5cb726124",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							}
						],
						"url": "https://gorest.co.in/public/v2/users/"
					},
					"response": []
				},
				{
					"name": "DELETE THE CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "292d1092-2f22-446a-a62d-1fb8f593855d",
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time is < 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is empty\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"server\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL STATEMENTS\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has PASSED\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF THE USER IS DELETED\");   // execute the next API\r",
									"}\r",
									"else {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");    // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9688b006-c282-42be-9ade-6b651bbb4072",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							}
						],
						"url": "https://gorest.co.in/public/v2/users/{{globalID}}"
					},
					"response": []
				},
				{
					"name": "VERIFY IF THE USER IS DELETED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fa6da800-3d3a-4e80-9fc8-d4a0a7aec5c6",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "71d431af-ed9c-4517-ac46-95694d91b3af",
								"exec": [
									"// RESPONSE CODE TESTING\r",
									"\r",
									"pm.test(\"Verify if response code=200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// RESPONSE TIME TESTING\r",
									"\r",
									"pm.test(\"Verify if response time is < 3 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// RESPONSE BODY TESTING\r",
									"\r",
									"pm.test(\"Verify if response body is received from server\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body has fields such as id, name, gender, email, status\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"// RESPONSE HEADERS TESTING\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if response headers don't reveal project details\", function () {\r",
									"    pm.response.to.not.have.header(\"server\");\r",
									"});\r",
									"\r",
									"// JSON-VALUE CHECK\r",
									"\r",
									"pm.test(\"Verify if the created user is deleted with id: \"+pm.globals.get(\"globalID\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.not.eql(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// VALIDATE DATA-TYPES\r",
									"\r",
									"pm.test(\"Verify the data-types of all fields in the response body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(typeof(jsonData[2].id)).to.eql(\"number\");\r",
									"    pm.expect(typeof(jsonData[2].email)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].name)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].status)).to.eql(\"string\");\r",
									"    pm.expect(typeof(jsonData[2].gender)).to.eql(\"string\");\r",
									"});\r",
									"\r",
									"// POSTMAN WORKFLOWS & CONDITIONAL STATEMENTS\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has PASSED\");\r",
									"    pm.execution.setNextRequest(\"\");   // stop the test\r",
									"}\r",
									"else {\r",
									"    console.log(\"The API \"+pm.info.requestName+\" has FAILED\");\r",
									"    pm.execution.setNextRequest(\"\");    // stop the test\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4ab7c409-b595-4012-b5a7-c8c8d2115f42",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer ba27e6bcbebdb6672d44749409fa9d17d58e44177848fa7079a86ee037657094"
							}
						],
						"url": "https://gorest.co.in/public/v2/users/"
					},
					"response": []
				}
			],
			"id": "9e6a8516-defb-42f0-a766-5378592d8446",
			"description": "_CREATE A USER (POST) —> VERIFY IF THE USER IS CREATED (GET) —> UPDATE THE CREATED USER (PATCH) —> VERIFY IF THE USER IS UPDATED (GET) —> DELETE THE CREATED USER (DELETE) —> VERIFY IF THE USER IS DELETED (GET)_"
		}
	]
}